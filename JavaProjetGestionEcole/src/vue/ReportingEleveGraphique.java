/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vue;
import controleur.DAO_Factory;
import java.awt.Color;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import modele.Personne;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 * Statistiques de l'eleve connecte
 * @author val_r
 */
public class ReportingEleveGraphique extends javax.swing.JFrame {

    private Personne user;
    private int idEleve;

    /**
     * Connecte le programme a la base de donnees
     */
    protected static Connection connect = null;
        static {
            Connection tmp = null;

            try {
                Class.forName("com.mysql.jdbc.Driver");
                tmp = DriverManager.getConnection("jdbc:mysql://localhost/gestionEcole", "root", "");
            } catch (ClassNotFoundException | SQLException ex) {
                Logger.getLogger(DAO_Factory.class.getName()).log(Level.SEVERE, null, ex);
            }
            connect = tmp;
        }

    /**
     * Crees une nouvelle JForm ModifierInfosGraphique
     * @param user Personne connectee
     */
     public ReportingEleveGraphique(Personne user) {
         initComponents();
         try{
             ResultSet result = this.connect.createStatement(
             ResultSet.TYPE_SCROLL_INSENSITIVE,
             ResultSet.CONCUR_READ_ONLY).executeQuery(
             "SELECT id FROM Inscription WHERE id_Personne = " + user.getId()
             );
             if(result.first())
             idEleve = result.getInt("id");
         } catch(SQLException e) {
             JOptionPane.showMessageDialog(null, e.getMessage());
         }
         this.user = user;
         updateComboBox();
     }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        returnButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        reportPanel = new javax.swing.JPanel();
        jComboBoxBulletin = new javax.swing.JComboBox<String>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(46, 204, 113));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Ebrima", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Reporting Elève");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel1)
                .addContainerGap(506, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(52, 73, 94));

        returnButton.setText("Retour");
        returnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnButtonActionPerformed(evt);
            }
        });

        jButton1.setText("Déconnexion");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        reportPanel.setBackground(new java.awt.Color(62, 83, 104));
        reportPanel.setLayout(new javax.swing.BoxLayout(reportPanel, javax.swing.BoxLayout.LINE_AXIS));

        jComboBoxBulletin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxBulletinActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(reportPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(returnButton, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jComboBoxBulletin, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jComboBoxBulletin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(reportPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(returnButton)
                    .addComponent(jButton1))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void returnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnButtonActionPerformed
        this.setVisible(false);
        new EleveGraphique(user).setVisible(true);
    }//GEN-LAST:event_returnButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.setVisible(false);
        new ConnexionGraphique().setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void updateComboBox(){
        String query = "SELECT * FROM Bulletin b, Inscription i, Trimestre t "+
        "WHERE b.id_Inscription=i.id AND t.id=b.id_Trimestre AND i.id= " + idEleve;
        try{
            ResultSet result = RechercheGraphique.connect.createStatement(
            ResultSet.TYPE_SCROLL_INSENSITIVE,
            ResultSet.CONCUR_READ_ONLY).executeQuery(query);

            while(result.next())
                jComboBoxBulletin.addItem(result.getString("b.id") + "_" + result.getString("nom") + "_" + result.getString("t.numero"));
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void displayStats(){
        DefaultCategoryDataset dataSet = new DefaultCategoryDataset();
        String parts[] = jComboBoxBulletin.getSelectedItem().toString().split("_");
        String idBulletin = parts[0];
        try {
            ResultSet SQLMaxIdDiscipline = this.connect.createStatement(
            ResultSet.TYPE_SCROLL_INSENSITIVE,
            ResultSet.CONCUR_READ_ONLY).executeQuery(
                "SELECT DISTINCT MAX(di.id) " +
                "FROM Evaluation ev, DetailBulletin db, Bulletin b, Enseignement en, Discipline di " +
                "WHERE b.id_Inscription = " + idEleve +
                " AND db.id_Bulletin = " + idBulletin +
                " AND b.id = " + idBulletin +
                " AND ev.id_DetailBulletin = db.id" +
                " AND en.id_Discipline= di.id AND db.id_Enseignement= en.id"
            );

            int maxDisc = 0;
            if (SQLMaxIdDiscipline.first())
                maxDisc = SQLMaxIdDiscipline.getInt("MAX(di.id)");

            ResultSet result = this.connect.createStatement(
            ResultSet.TYPE_SCROLL_INSENSITIVE,
            ResultSet.CONCUR_READ_ONLY).executeQuery(
            "SELECT DISTINCT ev.id, note, ev.appreciation, di.nom, di.id " +
            "FROM Evaluation ev, DetailBulletin db, Bulletin b, Enseignement en, Discipline di " +
            "WHERE b.id_Inscription = " + idEleve +
            " AND db.id_Bulletin = " + idBulletin +
            " AND b.id = " + idBulletin +
            " AND ev.id_DetailBulletin = db.id" +
            " AND en.id_Discipline= di.id AND db.id_Enseignement= en.id"
            );

            ArrayList<Float> notes = new ArrayList<Float>(maxDisc);
            ArrayList<Integer> nbNotes = new ArrayList<Integer>(maxDisc);
            ArrayList<String> disciplines = new ArrayList<String>(maxDisc);

            for(int indexFill = 0; indexFill < maxDisc; indexFill++){
                notes.add(0f);
                nbNotes.add(0);
                disciplines.add("");
            }

            while(result.next()){
                int index = result.getInt("di.id") - 1;
                nbNotes.set(index, nbNotes.get(index) + 1);
                notes.set(index, notes.get(index) + result.getFloat("note"));
                if(disciplines.get(index).isEmpty())
                disciplines.set(index, result.getString("di.nom"));
            }

            for(int index = 0; index < maxDisc; index++)
                dataSet.addValue(notes.get(index) / nbNotes.get(index), "Note", disciplines.get(index));

            JFreeChart chart = ChartFactory.createBarChart(
            "Notes de l'élève", //Titre du graph
            "Matière", // Légende axe des X
            "Note sur 20", //Légende axe des Y
            dataSet,
            PlotOrientation.VERTICAL, //Orientation des données
            true, true, false);

            ChartPanel panel = new ChartPanel(chart);

            reportPanel.removeAll();
            reportPanel.add(panel);
            reportPanel.updateUI();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void jComboBoxBulletinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxBulletinActionPerformed
        displayStats();
    }//GEN-LAST:event_jComboBoxBulletinActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBoxBulletin;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel reportPanel;
    private javax.swing.JButton returnButton;
    // End of variables declaration//GEN-END:variables
}
